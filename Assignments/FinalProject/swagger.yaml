openapi: 3.0.1
info:
  title: Bookstore Management API
  description: RESTful API for managing authors, books, customers, and orders with sales reporting (it is not very reliable please use POSTMAN and the testing file provided within this project).
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /authors:
    post:
      summary: Create a new author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                bio:
                  type: string
              required:
                - first_name
                - last_name
      responses:
        201:
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    get:
      summary: Retrieve all authors
      responses:
        200:
          description: List of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /authors/{id}:
    put:
      summary: Update an existing author
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          description: Author updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    delete:
      summary: Delete an author
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Author deleted successfully
        400:
          description: Cannot delete author with associated books
  /books:
    post:
      summary: Create a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        201:
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    get:
      summary: Retrieve all books
      parameters:
        - name: title
          in: query
          schema:
            type: string
      responses:
        200:
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/{id}:
    get:
      summary: Get a book by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Book details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    delete:
      summary: Delete a book
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Book deleted successfully
  /customers:
    post:
      summary: Create a new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        201:
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
    get:
      summary: Retrieve all customers
      responses:
        200:
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
  /customers/{id}:
    delete:
      summary: Delete a customer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Customer deleted successfully
        400:
          description: Cannot delete customer with associated orders
  /orders:
    post:
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        201:
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    get:
      summary: Retrieve all orders
      responses:
        200:
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  /orders/{id}:
    delete:
      summary: Delete an order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Order deleted successfully
  /reports:
    get:
      summary: Retrieve sales reports by date range
      parameters:
        - name: start_date
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        200:
          description: List of sales reports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SalesReport'
components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        bio:
          type: string
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        genres:
          type: array
          items:
            type: string
        published_at:
          type: string
          format: date-time
        price:
          type: number
        stock:
          type: integer
    Customer:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            postal_code:
              type: string
            country:
              type: string
    Order:
      type: object
      properties:
        id:
          type: integer
        customer:
          $ref: '#/components/schemas/Customer'
        items:
          type: array
          items:
            type: object
            properties:
              book:
                $ref: '#/components/schemas/Book'
              quantity:
                type: integer
        total_price:
          type: number
        status:
          type: string
        created_at:
          type: string
          format: date-time
    SalesReport:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        total_revenue:
          type: number
        total_orders:
          type: integer
        top_selling_books:
          type: array
          items:
            type: object
            properties:
              book:
                $ref: '#/components/schemas/Book'
              quantity_sold:
                type: integer
